// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/ports/repositories/question_repository.go

// Package mock_repositories is a generated GoMock package.
package mockports

import (
	reflect "reflect"

	domain "github.com/PyMarcus/TCC_SistemasDeInformacao2025/internal/core/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockQuestion is a mock of Question interface.
type MockQuestion struct {
	ctrl     *gomock.Controller
	recorder *MockQuestionMockRecorder
}

// MockQuestionMockRecorder is the mock recorder for MockQuestion.
type MockQuestionMockRecorder struct {
	mock *MockQuestion
}

// NewMockQuestion creates a new mock instance.
func NewMockQuestion(ctrl *gomock.Controller) *MockQuestion {
	mock := &MockQuestion{ctrl: ctrl}
	mock.recorder = &MockQuestionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuestion) EXPECT() *MockQuestionMockRecorder {
	return m.recorder
}

// FindAll mocks base method.
func (m *MockQuestion) FindAll() ([]*domain.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]*domain.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockQuestionMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockQuestion)(nil).FindAll))
}
